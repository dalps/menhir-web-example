// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cmo, use-js-string=true, version=6.0.1

//# unitInfo: Provides: Dune__exe__Parser
//# unitInfo: Requires: Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Printf = global_data.Stdlib__Printf,
    Assert_failure = global_data.Assert_failure,
    Error =
      [248,
       "Dune__exe__Parser.MenhirBasics.Error",
       runtime.caml_fresh_oo_id(0)],
    _a_ =
      [0,
       [11,
        "Internal failure -- please contact the parser generator's developers.\n",
        [10, 0]],
       "Internal failure -- please contact the parser generator's developers.\n%!"],
    _b_ = [0, "parser.ml", 105, 4];
   function eRR(s){throw caml_maybe_attach_backtrace(Error, 1);}
   function menhir_run_01$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, s, menhir_s){
    var tok = caml_call1(menhir_lexer, menhir_lexbuf), v = [0, s];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_expr,
              [0, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_expr
            (counter$0,
             menhir_stack,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function menhir_run_01
   (menhir_stack, menhir_lexbuf, menhir_lexer, s, menhir_s){
    return caml_trampoline
            (menhir_run_01$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, s, menhir_s));
   }
   function menhir_goto_expr
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    switch(menhir_s){
      case 0:
       if(typeof tok === "number" && 2 <= tok) return v; return eRR(0);
      case 1:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_05,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$0 = counter + 1 | 0;
       return menhir_run_05
               (counter$0,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
      default:
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_05,
                 [0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok]);
       var counter$1 = counter + 1 | 0;
       return menhir_run_05
               (counter$1,
                menhir_stack,
                menhir_lexbuf,
                menhir_lexer,
                v,
                menhir_s,
                tok);
    }
   }
   function menhir_run_05
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s, tok){
    var menhir_stack$0 = [0, menhir_stack, menhir_s, v];
    if(typeof tok !== "number"){
     var v_0 = tok[1], _e_ = 2;
     if(counter >= 50)
      return caml_trampoline_return
              (menhir_run_01$0,
               [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, v_0, _e_]);
     var counter$2 = counter + 1 | 0;
     return menhir_run_01$0
             (counter$2,
              menhir_stack$0,
              menhir_lexbuf,
              menhir_lexer,
              v_0,
              _e_);
    }
    switch(tok){
      case 0:
       var menhir_stack$1 = menhir_stack$0, xs$0 = 0;
       for(;;){
        var
         x = menhir_stack$1[3],
         menhir_s$0 = menhir_stack$1[2],
         menhir_stack$2 = menhir_stack$1[1],
         xs = [0, x, xs$0];
        switch(menhir_s$0){
          case 0:
           caml_call1(Stdlib_Printf[3], _a_);
           throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
          case 1:
           if(counter >= 50)
            return caml_trampoline_return
                    (menhir_run_03,
                     [0, menhir_stack$2, menhir_lexbuf, menhir_lexer, xs]);
           var counter$0 = counter + 1 | 0;
           return menhir_run_03
                   (counter$0, menhir_stack$2, menhir_lexbuf, menhir_lexer, xs);
          default: menhir_stack$1 = menhir_stack$2; xs$0 = xs;
        }
       }
       break;
      case 1:
       var _d_ = 2;
       if(counter >= 50)
        return caml_trampoline_return
                (menhir_run_02$0,
                 [0, menhir_stack$0, menhir_lexbuf, menhir_lexer, _d_]);
       var counter$1 = counter + 1 | 0;
       return menhir_run_02$0
               (counter$1, menhir_stack$0, menhir_lexbuf, menhir_lexer, _d_);
      default: return eRR(0);
    }
   }
   function menhir_run_02$0
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    var menhir_stack$0 = menhir_stack, menhir_s$0 = menhir_s;
    for(;;){
     var
      menhir_stack$1 = [0, menhir_stack$0, menhir_s$0],
      tok = caml_call1(menhir_lexer, menhir_lexbuf);
     if(typeof tok !== "number"){
      var v$0 = tok[1], _c_ = 1;
      if(counter >= 50)
       return caml_trampoline_return
               (menhir_run_01$0,
                [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, v$0, _c_]);
      var counter$1 = counter + 1 | 0;
      return menhir_run_01$0
              (counter$1,
               menhir_stack$1,
               menhir_lexbuf,
               menhir_lexer,
               v$0,
               _c_);
     }
     switch(tok){
       case 0:
        var v = 0;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_03,
                  [0, menhir_stack$1, menhir_lexbuf, menhir_lexer, v]);
        var counter$0 = counter + 1 | 0;
        return menhir_run_03
                (counter$0, menhir_stack$1, menhir_lexbuf, menhir_lexer, v);
       case 1:
        menhir_stack$0 = menhir_stack$1; menhir_s$0 = 1; break;
       default: return eRR(0);
     }
    }
   }
   function menhir_run_02(menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s){
    return caml_trampoline
            (menhir_run_02$0
              (0, menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s));
   }
   function menhir_run_03
   (counter, menhir_stack, menhir_lexbuf, menhir_lexer, es){
    var
     tok = caml_call1(menhir_lexer, menhir_lexbuf),
     menhir_s = menhir_stack[2],
     menhir_stack$0 = menhir_stack[1],
     v = [1, es];
    if(counter >= 50)
     return caml_trampoline_return
             (menhir_goto_expr,
              [0,
               menhir_stack$0,
               menhir_lexbuf,
               menhir_lexer,
               v,
               menhir_s,
               tok]);
    var counter$0 = counter + 1 | 0;
    return menhir_goto_expr
            (counter$0,
             menhir_stack$0,
             menhir_lexbuf,
             menhir_lexer,
             v,
             menhir_s,
             tok);
   }
   function f(menhir_lexer, menhir_lexbuf){
    var
     menhir_stack = 0,
     menhir_s = 0,
     tok = caml_call1(menhir_lexer, menhir_lexbuf);
    if(typeof tok === "number")
     var
      match =
        1 === tok
         ? menhir_run_02(menhir_stack, menhir_lexbuf, menhir_lexer, menhir_s)
         : eRR(0);
    else
     var
      v = tok[1],
      match =
        menhir_run_01(menhir_stack, menhir_lexbuf, menhir_lexer, v, menhir_s);
    return match;
   }
   var Dune_exe_Parser = [0, Error, f];
   runtime.caml_register_global(9, Dune_exe_Parser, "Dune__exe__Parser");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
